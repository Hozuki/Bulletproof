{"version":3,"sources":["danmaku/danmakuproviderbase.ts"],"names":["DanmakuProviderBase","DanmakuProviderBase.constructor","DanmakuProviderBase.danmakuKind","DanmakuProviderBase.update","DanmakuProviderBase.addDanmaku","DanmakuProviderBase.layoutManager","DanmakuProviderBase.displayingDanmakuList","DanmakuProviderBase.fullDanmakuList","DanmakuProviderBase.danmakuLayer","DanmakuProviderBase.danmakuCoordinator","DanmakuProviderBase.bulletproof","DanmakuProviderBase.flags"],"mappings":"AAAA;;GAEG;AAKH,oCAAkC,uBAAuB,CAAC,CAAA;AAI1D,oCAAkC,+DAA+D,CAAC,CAAA;AAGlG;;;GAGG;AACH;IAEIA;;;OAGGA;IACHA,6BAAYA,WAA8BA;QAyJhCC,2BAAsBA,GAAcA,IAAIA,CAACA;QACzCA,iBAAYA,GAAsBA,IAAIA,CAACA;QACvCA,mBAAcA,GAA4BA,IAAIA,CAACA;QAC/CA,kBAAaA,GAAiBA,IAAIA,CAACA;QACrCA,iBAAYA,GAAeA,IAAIA,CAACA;QA5JpCA,IAAIA,CAACA,YAAYA,GAAGA,WAAWA,CAACA;QAChCA,IAAIA,CAACA,sBAAsBA,GAAGA,EAAEA,CAACA;QACjCA,IAAIA,CAACA,YAAYA,GAAGA,WAAWA,CAACA,WAAWA,CAACA;IAChDA,CAACA;IAODD,sBAAIA,4CAAWA;QALfA;;;;WAIGA;aACHA;YACIE,MAAMA,IAAIA,yCAAmBA,EAAEA,CAACA;QACpCA,CAACA;;;OAAAF;IAcDA;;OAEGA;IACHA,oCAAMA,GAANA;QACIG,IAAIA,CAACA,wBAAwBA,EAAEA,CAACA;QAChCA,IAAIA,CAACA,aAAaA,CAACA,aAAaA,EAAEA,CAACA;IACvCA,CAACA;IAEDH;;;;;;;;OAQGA;IACHA,wCAAUA,GAAVA,UAAWA,OAAcA,EAAEA,IAASA;QAChCI,EAAEA,CAACA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,CAACA,CAACA,IAAIA,IAAIA,CAACA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC7FA,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA,OAAOA,EAAEA,IAAIA,CAACA,CAACA;QAC5CA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACJA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;IACLA,CAACA;IAsCDJ,sBAAIA,8CAAaA;QAJjBA;;;WAGGA;aACHA;YACIK,MAAMA,CAACA,IAAIA,CAACA,cAAcA,CAACA;QAC/BA,CAACA;;;OAAAL;IAMDA,sBAAIA,sDAAqBA;QAJzBA;;;WAGGA;aACHA;YACIM,MAAMA,CAACA,IAAIA,CAACA,sBAAsBA,CAACA;QACvCA,CAACA;;;OAAAN;IAMDA,sBAAIA,gDAAeA;QAJnBA;;;WAGGA;aACHA;YACIO,MAAMA,IAAIA,yCAAmBA,EAAEA,CAACA;QACpCA,CAACA;;;OAAAP;IAMDA,sBAAIA,6CAAYA;QAJhBA;;;WAGGA;aACHA;YACIQ,MAAMA,CAACA,IAAIA,CAACA,aAAaA,CAACA;QAC9BA,CAACA;;;OAAAR;IAMDA,sBAAIA,mDAAkBA;QAJtBA;;;WAGGA;aACHA;YACIS,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;QAC7BA,CAACA;;;OAAAT;IAMDA,sBAAIA,4CAAWA;QAJfA;;;WAGGA;aACHA;YACIU,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;QAC7BA,CAACA;;;OAAAV;IAQDA,sBAAIA,sCAAKA;QANTA;;;;;WAKGA;aACHA;YACIW,MAAMA,CAACA,yCAAmBA,CAACA,IAAIA,CAACA;QACpCA,CAACA;;;OAAAX;IAmBLA,0BAACA;AAADA,CArKA,AAqKCA,IAAA;AArKqB,2BAAmB,sBAqKxC,CAAA","file":"danmaku/DanmakuProviderBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/28.\r\n */\r\n\r\nimport {DanmakuKind} from \"./DanmakuKind\";\r\nimport {DanmakuLayoutManagerBase} from \"./DanmakuLayoutManagerBase\";\r\nimport {DanmakuCoordinator} from \"./DanmakuCoordinator\";\r\nimport {DanmakuProviderFlag} from \"./DanmakuProviderFlag\";\r\nimport {IDanmaku} from \"./IDanmaku\";\r\nimport {Bulletproof} from \"../Bulletproof\";\r\nimport {IDisposable} from \"../../lib/glantern/src/glantern/IDisposable\";\r\nimport {NotImplementedError} from \"../../lib/glantern/lib/glantern-utils/src/NotImplementedError\";\r\nimport {DisplayObject} from \"../../lib/glantern/src/glantern/flash/display/DisplayObject\";\r\n\r\n/**\r\n * Base class exposing common service of a danmaku provider.\r\n * This class must be inherited.\r\n */\r\nexport abstract class DanmakuProviderBase implements IDisposable {\r\n\r\n    /**\r\n     * Creates a new danmaku provider.\r\n     * @param coordinator {DanmakuCoordinator} The {@link DanmakuCoordinator} that will be used for reversed queries.\r\n     */\r\n    constructor(coordinator:DanmakuCoordinator) {\r\n        this._coordinator = coordinator;\r\n        this._displayingDanmakuList = [];\r\n        this._bulletproof = coordinator.bulletproof;\r\n    }\r\n\r\n    /**\r\n     * The kind of this danmaku provider. Override this property and return a unique number to identify from other\r\n     * danmaku providers.\r\n     * This property must be overridden.\r\n     */\r\n    get danmakuKind():DanmakuKind {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Disposes the danmaku provider and release all resources occupied.\r\n     * This method must be overridden.\r\n     */\r\n    abstract dispose():void;\r\n\r\n    /**\r\n     * Perform extra initialization after created.\r\n     * This method must be overridden.\r\n     */\r\n    abstract initialize():void;\r\n\r\n    /**\r\n     * Updates the state of this instance.\r\n     */\r\n    update():void {\r\n        this.updateDisplayDanmakuList();\r\n        this.layoutManager.performLayout();\r\n    }\r\n\r\n    /**\r\n     * Adds a danmaku with the given content and adds it into internal danmaku list.\r\n     * A solid {@link IDanmaku} implementations determines how to interpret the given content.\r\n     * This method must be overridden.\r\n     * @param content {String} The content used to create a new danmaku.\r\n     * @param [args] {*} Extra arguments used to create the danmaku. For example, the exact type must\r\n     *                   be specified when creating a {@link SimpleDanmaku}.\r\n     * @returns {IDanmaku} The created danmaku.\r\n     */\r\n    addDanmaku(content:string, args?:any):IDanmaku {\r\n        if ((true || this.canCreateDanmaku(args)) && this.danmakuCoordinator.shouldCreateDanmaku(this)) {\r\n            return this.__addDanmaku(content, args);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a danmaku from internal danmaku list. If the provided danmaku is not in the list, nothing will be done.\r\n     * This method must be overridden.\r\n     * @param danmaku {IDanmaku} The danmaku that will be removed.\r\n     * @returns {Boolean} Whether the removal was all-OK.\r\n     */\r\n    abstract removeDanmaku(danmaku:IDanmaku):boolean;\r\n\r\n    /**\r\n     * Determines whether a new danmaku can be created with specified arguments, in current\r\n     * {@link DanmakuProviderBase}'s view.\r\n     * @param args {*} Arguments used to create a new danmaku.\r\n     * @returns {Boolean} Whether a danmaku can be created with specified arguments.\r\n     */\r\n    abstract canCreateDanmaku(args?:any):boolean;\r\n\r\n    /**\r\n     * Removes \"dead\" danmakus from the internal danmaku list and release the resources they occupy.\r\n     * A danmaku being existed longer than its life time is regarded as \"dead\".\r\n     * This method must be overridden.\r\n     */\r\n    abstract updateDisplayDanmakuList():void;\r\n\r\n    /**\r\n     * Determines if a danmaku is \"dead\". A \"dead\" danmaku will be removed from the danmaku list to grant space\r\n     * for new danmakus.\r\n     * This method must be overridden.\r\n     * @param danmaku {IDanmaku} The danmaku to test.\r\n     * @returns {Boolean} True if the danmaku is \"dead\", and false otherwise.\r\n     */\r\n    abstract isDanmakuDead(danmaku:IDanmaku):boolean;\r\n\r\n    /**\r\n     * Gets the layout manager associated with this instance.\r\n     * @returns {DanmakuLayoutManagerBase}\r\n     */\r\n    get layoutManager():DanmakuLayoutManagerBase {\r\n        return this._layoutManager;\r\n    }\r\n\r\n    /**\r\n     * Gets the list including all displaying danmakus created and managed by this danmaku provider.\r\n     * @returns {IDanmaku[]}\r\n     */\r\n    get displayingDanmakuList():IDanmaku[] {\r\n        return this._displayingDanmakuList;\r\n    }\r\n\r\n    /**\r\n     * Gets the list including all danmakus created and managed by this danmaku provider.\r\n     * @returns {IDanmaku[]}\r\n     */\r\n    get fullDanmakuList():IDanmaku[] {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets the {@link DisplayObject} that contains danmakus of this {@link DanmakuProviderBase} as a layer.\r\n     * @returns {DisplayObject}\r\n     */\r\n    get danmakuLayer():DisplayObject {\r\n        return this._danmakuLayer;\r\n    }\r\n\r\n    /**\r\n     * Gets the danmaku coordinator specified at the time of creation.\r\n     * @returns {DanmakuCoordinator}\r\n     */\r\n    get danmakuCoordinator():DanmakuCoordinator {\r\n        return this._coordinator;\r\n    }\r\n\r\n    /**\r\n     * Gets the {@link Bulletproof} instance that controls this {@link DanmakuProviderBase}.\r\n     * @returns {Bulletproof}\r\n     */\r\n    get bulletproof():Bulletproof {\r\n        return this._bulletproof;\r\n    }\r\n\r\n    /**\r\n     * Gets the flags of this danmaku provider. The flags may influence how this danmaku provider is treated,\r\n     * for example, in {@link DanmakuCoordinator.shouldCreateDanmaku}.\r\n     * The default value is {@link DanmakuProviderFlag.None}, indicating no special flag is set.\r\n     * @returns {DanmakuProviderFlag}\r\n     */\r\n    get flags():DanmakuProviderFlag {\r\n        return DanmakuProviderFlag.None;\r\n    }\r\n\r\n    /**\r\n     * Adds a danmaku with the given content and adds it into internal danmaku list.\r\n     * A solid {@link IDanmaku} implementations determines how to interpret the given content.\r\n     * This method must be overridden.\r\n     * @param content {String} The content used to create a new danmaku.\r\n     * @param [args] {*} Extra arguments used to create the danmaku. For example, the exact type must\r\n     *                   be specified when creating a {@link SimpleDanmaku}.\r\n     * @returns {IDanmaku} The created danmaku.\r\n     */\r\n    protected abstract __addDanmaku(content:string, args?:any):IDanmaku;\r\n\r\n    protected _displayingDanmakuList:IDanmaku[] = null;\r\n    protected _coordinator:DanmakuCoordinator = null;\r\n    protected _layoutManager:DanmakuLayoutManagerBase = null;\r\n    protected _danmakuLayer:DisplayObject = null;\r\n    private _bulletproof:Bulletproof = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["danmaku/danmakuproviderbase.ts"],"names":["DanmakuProviderBase","DanmakuProviderBase.constructor","DanmakuProviderBase.danmakuKind","DanmakuProviderBase.update","DanmakuProviderBase.removeDeadDanmakus","DanmakuProviderBase.layoutManager","DanmakuProviderBase.danmakuList","DanmakuProviderBase.danmakuCoordinator","DanmakuProviderBase.flags"],"mappings":"AAAA;;GAEG;AAKH,oCAAkC,kDAAkD,CAAC,CAAA;AAGrF,oCAAkC,uBAAuB,CAAC,CAAA;AAE1D;;;GAGG;AACH;IAEIA;;;OAGGA;IACHA,6BAAYA,WAA8BA;QA6FhCC,iBAAYA,GAAiBA,IAAIA,CAACA;QAClCA,iBAAYA,GAAsBA,IAAIA,CAACA;QACvCA,mBAAcA,GAA4BA,IAAIA,CAACA;QA9FrDA,IAAIA,CAACA,YAAYA,GAAGA,WAAWA,CAACA;QAChCA,IAAIA,CAACA,YAAYA,GAAGA,EAAEA,CAACA;IAC3BA,CAACA;IAODD,sBAAIA,4CAAWA;QALfA;;;;WAIGA;aACHA;YACIE,MAAMA,IAAIA,yCAAmBA,EAAEA,CAACA;QACpCA,CAACA;;;OAAAF;IAQDA;;OAEGA;IACHA,oCAAMA,GAANA;QACIG,IAAIA,CAACA,kBAAkBA,EAAEA,CAACA;QAC1BA,IAAIA,CAACA,aAAaA,CAACA,aAAaA,EAAEA,CAACA;IACvCA,CAACA;IAiBDH;;;OAGGA;IACHA,gDAAkBA,GAAlBA;QACII,IAAIA,OAAmBA,CAACA;QACxBA,IAAIA,WAAWA,GAAGA,IAAIA,CAACA,kBAAkBA,CAACA,WAAWA,CAACA;QACtDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,MAAMA,EAAEA,EAAEA,CAACA,EAAEA,CAACA;YAC/CA,OAAOA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;YAC9BA,EAAEA,CAACA,CAACA,OAAOA,CAACA,QAAQA,GAAGA,OAAOA,CAACA,QAAQA,GAAGA,IAAIA,GAAGA,WAAWA,CAACA,WAAWA,CAACA,CAACA,CAACA;gBACvEA,IAAIA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;gBAC5BA,EAAEA,CAACA,CAACA;YACRA,CAACA;QACLA,CAACA;IACLA,CAACA;IAMDJ,sBAAIA,8CAAaA;QAJjBA;;;WAGGA;aACHA;YACIK,MAAMA,CAACA,IAAIA,CAACA,cAAcA,CAACA;QAC/BA,CAACA;;;OAAAL;IAMDA,sBAAIA,4CAAWA;QAJfA;;;WAGGA;aACHA;YACIM,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;QAC7BA,CAACA;;;OAAAN;IAMDA,sBAAIA,mDAAkBA;QAJtBA;;;WAGGA;aACHA;YACIO,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;QAC7BA,CAACA;;;OAAAP;IAQDA,sBAAIA,sCAAKA;QANTA;;;;;WAKGA;aACHA;YACIQ,MAAMA,CAACA,yCAAmBA,CAACA,IAAIA,CAACA;QACpCA,CAACA;;;OAAAR;IAMLA,0BAACA;AAADA,CAvGA,AAuGCA,IAAA;AAvGqB,2BAAmB,sBAuGxC,CAAA","file":"danmaku/DanmakuProviderBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/28.\r\n */\r\n\r\nimport {IDisposable} from \"../../lib/glantern/src/IDisposable\";\r\nimport {DanmakuKind} from \"./DanmakuKind\";\r\nimport {DanmakuLayoutManagerBase} from \"./DanmakuLayoutManagerBase\";\r\nimport {NotImplementedError} from \"../../lib/glantern/src/_util/NotImplementedError\";\r\nimport {DanmakuCoordinator} from \"./DanmakuCoordinator\";\r\nimport {DanmakuBase} from \"./DanmakuBase\";\r\nimport {DanmakuProviderFlag} from \"./DanmakuProviderFlag\";\r\n\r\n/**\r\n * Base class exposing common service of a danmaku provider.\r\n * This class must be inherited.\r\n */\r\nexport abstract class DanmakuProviderBase implements IDisposable {\r\n\r\n    /**\r\n     * Creates a new danmaku provider.\r\n     * @param coordinator {DanmakuCoordinator} The {@link DanmakuCoordinator} that will be used for reversed queries.\r\n     */\r\n    constructor(coordinator:DanmakuCoordinator) {\r\n        this._coordinator = coordinator;\r\n        this._danmakuList = [];\r\n    }\r\n\r\n    /**\r\n     * The kind of this danmaku provider. Override this property and return a unique number to identify from other\r\n     * danmaku providers.\r\n     * This property must be overridden.\r\n     */\r\n    get danmakuKind():DanmakuKind {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Disposes the danmaku provider and release all resources occupied.\r\n     * This method must be overridden.\r\n     */\r\n    abstract dispose():void;\r\n\r\n    /**\r\n     * Updates the state of this instance.\r\n     */\r\n    update():void {\r\n        this.removeDeadDanmakus();\r\n        this.layoutManager.performLayout();\r\n    }\r\n\r\n    /**\r\n     * Adds a danmaku with the given content and adds it into internal danmaku list.\r\n     * A solid {@link DanmakuBase} implementations determines how to interpret the given content.\r\n     * This method must be overridden.\r\n     * @param content {String} The content used to create a new danmaku.\r\n     */\r\n    abstract addDanmaku(content:string):DanmakuBase;\r\n\r\n    /**\r\n     * Removes a danmaku from internal danmaku list. If the provided danmaku is not in the list, nothing will be done.\r\n     * This method must be overridden.\r\n     * @param danmaku {DanmakuBase} The danmaku that will be removed.\r\n     */\r\n    abstract removeDanmaku(danmaku:DanmakuBase):boolean;\r\n\r\n    /**\r\n     * Removes \"dead\" danmakus from the internal danmaku list and release the resources they occupy.\r\n     * A danmaku being existed longer than its life time is regarded as \"dead\".\r\n     */\r\n    removeDeadDanmakus():void {\r\n        var danmaku:DanmakuBase;\r\n        var bulletproof = this.danmakuCoordinator.bulletproof;\r\n        for (var i = 0; i < this.danmakuList.length; ++i) {\r\n            danmaku = this.danmakuList[i];\r\n            if (danmaku.bornTime + danmaku.lifeTime * 1000 < bulletproof.timeElapsed) {\r\n                this.removeDanmaku(danmaku);\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the layout manager associated with this instance.\r\n     * @returns {DanmakuLayoutManagerBase}\r\n     */\r\n    get layoutManager():DanmakuLayoutManagerBase {\r\n        return this._layoutManager;\r\n    }\r\n\r\n    /**\r\n     * Gets the list including all danmakus created and managed by this danmaku provider.\r\n     * @returns {DanmakuBase[]}\r\n     */\r\n    get danmakuList():DanmakuBase[] {\r\n        return this._danmakuList;\r\n    }\r\n\r\n    /**\r\n     * Gets the danmaku coordinator specified at the time of creation.\r\n     * @returns {DanmakuCoordinator}\r\n     */\r\n    get danmakuCoordinator():DanmakuCoordinator {\r\n        return this._coordinator;\r\n    }\r\n\r\n    /**\r\n     * Gets the flags of this danmaku provider. The flags may influence how this danmaku provider is treated,\r\n     * for example, in {@link DanmakuCoordinator.shouldCreateDanmaku}.\r\n     * The default value is {@link DanmakuProviderFlag.None}, indicating no special flag is set.\r\n     * @returns {DanmakuProviderFlag}\r\n     */\r\n    get flags():DanmakuProviderFlag {\r\n        return DanmakuProviderFlag.None;\r\n    }\r\n\r\n    protected _danmakuList:DanmakuBase[] = null;\r\n    protected _coordinator:DanmakuCoordinator = null;\r\n    protected _layoutManager:DanmakuLayoutManagerBase = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["danmaku/simple/simpledanmakulayoutmanager.ts"],"names":["SimpleDanmakuLayoutManager","SimpleDanmakuLayoutManager.constructor","SimpleDanmakuLayoutManager.dispose","SimpleDanmakuLayoutManager.performLayout","SimpleDanmakuLayoutManager.performLayout.isInPlayingRange","SimpleDanmakuLayoutManager.danmakuProvider","SimpleDanmakuLayoutManager.danmakuKind","SimpleDanmakuLayoutManager.onStageResize","positionFlying","handleOverflow","positionTop","positionBottom","positionTopLeft","positionTopRight","positionBottomLeft","positionBottomRight"],"mappings":"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GAAGA,OAAOA,CAACA,UAAUA,CAACA,CAACA,CAACA;4BAC9CA,QAAQA,GAAGA,CAACA,CAACA;wBACjBA,CAACA;wBACDA,KAAKA,CAACA;oBACVA,CAACA;oBACDA,EAAEA,CAACA,CAACA,eAAeA,GAAGA,iBAAiBA,CAACA,CAACA,CAACA;wBACtCA,iBAAiBA,GAAGA,eAAeA,CAACA;oBACxCA,CAACA;gBACLA,CAACA;YACLA,CAACA;YACDA,uGAAuGA;YACvGA,EAAEA,CAACA,CAACA,iBAAiBA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,UAAUA,CAACA,CAACA,CAACA;gBACxDA,OAAOA,CAACA,CAACA,GAAGA,iBAAiBA,CAACA;YAClCA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,OAAOA,CAACA,CAACA,GAAGA,QAAQA,CAACA;YACzBA,CAACA;QACLA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACJA,OAAOA,CAACA,CAACA,GAAGA,CAACA,CAACA;QAClBA,CAACA;QACDA,OAAOA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;IACxBA,CAACA;AACLA,CAACA;AAED,wBAAwB,cAA8B,EAAE,YAAmB,EAAE,IAAsB;IAC/FC,mGAAmGA;IACnGA,uEAAuEA;IACvEA,oCAAoCA;IACpCA,IAAIA,IAAWA,CAACA;IAChBA,GAAGA,CAACA;QACAA,EAAEA,CAACA,CAACA,cAAcA,CAACA,YAAYA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,cAAcA,CAACA,YAAYA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACjFA,IAAIA,GAAGA,cAAcA,CAACA,YAAYA,CAACA,CAACA,CAACA,GAAGA,cAAcA,CAACA,YAAYA,CAACA,CAACA,UAAUA,CAACA;QACpFA,CAACA;QACDA,EAAEA,YAAYA,CAACA;IACnBA,CAACA,QAAQA,YAAYA,GAAGA,cAAcA,CAACA,MAAMA,EAAEA;IAC/CA,MAAMA,CAACA,IAAIA,CAACA;AAChBA,CAACA;AAED,qBAAqB,OAAqB,EAAE,aAA4B;IACpEC,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA;QAChBA,OAAOA,CAACA,CAACA,GAAGA,CAACA,aAAaA,CAACA,KAAKA,CAACA,UAAUA,GAAGA,OAAOA,CAACA,SAASA,CAACA,GAAGA,CAACA,CAACA;QACrEA,OAAOA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;IACxBA,CAACA;IACDA,IAAIA,WAAWA,GAAGA,aAAaA,CAACA,KAAKA,CAACA,WAAWA,CAACA;IAClDA,IAAIA,cAAcA,GAAGA,aAAaA,CAACA,cAAcA,CAACA;IAClDA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA;QAChBA,IAAIA,QAAQA,GAAGA,CAACA,CAACA;QACjBA,EAAEA,CAACA,CAACA,cAAcA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;YAC5BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,cAAcA,CAACA,MAAMA,EAAEA,EAAEA,CAACA,EAAEA,CAACA;gBAC7CA,EAAEA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,qCAAiBA,CAACA,WAAWA,CAACA,IAAIA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;oBACpFA,IAAIA,eAAeA,GAAGA,cAAcA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,cAAcA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA;oBACzEA,IAAIA,kBAAkBA,GAAGA,QAAQA,GAAGA,OAAOA,CAACA,UAAUA,CAACA;oBACvDA,iFAAiFA;oBACjFA,EAAEA,CAACA,CAACA,eAAMA,CAACA,oBAAoBA,CAACA,kBAAkBA,EAAEA,cAAcA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,eAAeA,CAACA;wBACrFA,eAAMA,CAACA,oBAAoBA,CAACA,QAAQA,EAAEA,cAAcA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,eAAeA,CAACA,CAACA,CAACA,CAACA;wBAC9EA,QAAQA,GAAGA,eAAeA,CAACA;oBAC/BA,CAACA;oBACDA,EAAEA,CAACA,CAACA,QAAQA,GAAGA,WAAWA,GAAGA,OAAOA,CAACA,UAAUA,CAACA,CAACA,CAACA;wBAC9CA,QAAQA,GAAGA,cAAcA,CAACA,cAAcA,EAAEA,CAACA,EAAEA,qCAAiBA,CAACA,WAAWA,CAACA,CAACA;wBAC5EA,EAAEA,CAACA,CAACA,QAAQA,GAAGA,WAAWA,GAAGA,OAAOA,CAACA,UAAUA,CAACA,CAACA,CAACA;4BAC9CA,QAAQA,GAAGA,CAACA,CAACA;wBACjBA,CAACA;wBACDA,KAAKA,CAACA;oBACVA,CAACA;gBACLA,CAACA;YACLA,CAACA;QACLA,CAACA;QACDA,OAAOA,CAACA,CAACA,GAAGA,QAAQA,CAACA;QACrBA,OAAOA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;IACxBA,CAACA;AACLA,CAACA;AAED,wBAAwB,OAAqB,EAAE,aAA4B;AAC3EC,CAACA;AAED,yBAAyB,OAAqB,EAAE,aAA4B;AAE5EC,CAACA;AAED,0BAA0B,OAAqB,EAAE,aAA4B;AAE7EC,CAACA;AAED,4BAA4B,OAAqB,EAAE,aAA4B;AAE/EC,CAACA;AAED,6BAA6B,OAAqB,EAAE,aAA4B;AAEhFC,CAACA","file":"danmaku/simple/SimpleDanmakuLayoutManager.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/28.\r\n */\r\n\r\nimport {DanmakuLayoutManagerBase} from \"../DanmakuLayoutManagerBase\";\r\nimport {SimpleDanmakuProvider} from \"./SimpleDanmakuProvider\";\r\nimport {DanmakuKind} from \"../DanmakuKind\";\r\nimport {IDanmaku} from \"../IDanmaku\";\r\nimport {SimpleDanmaku} from \"./SimpleDanmaku\";\r\nimport {StageResizedEventArgs} from \"../StageResizedEventArgs\";\r\nimport {SimpleDanmakuType} from \"./SimpleDanamkuType\";\r\nimport {Stage} from \"../../../lib/glantern/src/flash/display/Stage\";\r\nimport {GLUtil} from \"../../../lib/glantern/lib/glantern-utils/src/GLUtil\";\r\n\r\ninterface IMeasureParams {\r\n    currentTime:number;\r\n    stage:Stage;\r\n    displayingList:SimpleDanmaku[];\r\n}\r\n\r\nexport class SimpleDanmakuLayoutManager extends DanmakuLayoutManagerBase {\r\n\r\n    constructor(provider:SimpleDanmakuProvider) {\r\n        super(provider);\r\n        this._danmakuProvider = provider;\r\n    }\r\n\r\n    dispose():void {\r\n    }\r\n\r\n    performLayout():void {\r\n        // Please notice that coordinates in this method are in <canvas> coordinate system, the same as Flash\r\n        // coordinate system.\r\n\r\n        var measureParams:IMeasureParams = {\r\n            currentTime: this.bulletproof.timeElapsed,\r\n            stage: this.bulletproof.stage,\r\n            displayingList: this.danmakuProvider.displayingDanmakuList\r\n        };\r\n\r\n        function isInPlayingRange(danmaku:SimpleDanmaku):boolean {\r\n            return danmaku.bornTime <= measureParams.currentTime && measureParams.currentTime <= danmaku.bornTime + danmaku.lifeTime * 1000;\r\n        }\r\n\r\n        var displayingList = measureParams.displayingList;\r\n        if (displayingList.length > 0) {\r\n            for (var i = 0; i < displayingList.length; ++i) {\r\n                var danmaku = displayingList[i];\r\n                if (isInPlayingRange(danmaku)) {\r\n                    if (!danmaku.visible) {\r\n                        danmaku.visible = true;\r\n                    }\r\n                    switch (danmaku.createParams.type) {\r\n                        case SimpleDanmakuType.FlyingR2L:\r\n                            positionFlying(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredTop:\r\n                            positionTop(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredBottom:\r\n                            positionBottom(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredTopLeft:\r\n                            positionTopLeft(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredTopRight:\r\n                            positionTopRight(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredBottomLeft:\r\n                            positionBottomLeft(danmaku, measureParams);\r\n                            break;\r\n                        case SimpleDanmakuType.AnchoredBottomRight:\r\n                            positionBottomRight(danmaku, measureParams);\r\n                            break;\r\n                        default:\r\n                            console.warn(\"What type is this?\");\r\n                            break;\r\n                    }\r\n                } else {\r\n                    // Don't draw danmakus which should not appear now.\r\n                    danmaku.visible = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get danmakuProvider():SimpleDanmakuProvider {\r\n        return this._danmakuProvider;\r\n    }\r\n\r\n    get danmakuKind():DanmakuKind {\r\n        return DanmakuKind.Simple;\r\n    }\r\n\r\n    onStageResize(sender:any, e:StageResizedEventArgs):void {\r\n        this._stageWidth = e.width;\r\n        this._stageHeight = e.height;\r\n    }\r\n\r\n    protected _danmakuProvider:SimpleDanmakuProvider;\r\n    private _stageWidth:number = 0;\r\n    private _stageHeight:number = 0;\r\n\r\n}\r\n\r\nfunction positionFlying(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n    var stageWidth = measureParams.stage.stageWidth;\r\n    var stageHeight = measureParams.stage.stageHeight;\r\n    // T_0: At position (STAGE_WIDTH, Y)\r\n    // T_final: At position (-DANMAKU_WIDTH, Y)\r\n    // Add 5 extra pixels to ensure the danmaku is entirely out of the stage when its life should end.\r\n    var elapsedLifeRatio = (measureParams.currentTime - danmaku.bornTime) / (danmaku.lifeTime * 1000);\r\n    danmaku.x = stageWidth - elapsedLifeRatio * (stageWidth + danmaku.textWidth + 5);\r\n    var displayingList = measureParams.displayingList;\r\n    if (!danmaku.ySet) {\r\n        if (displayingList.length > 0) {\r\n            var currentY = 0;\r\n            var bottommostThereIs = 0;\r\n            for (var i = 0; i < displayingList.length; ++i) {\r\n                if (displayingList[i].isType(SimpleDanmakuType.FlyingR2L) && displayingList[i].ySet) {\r\n                    // Bottom of current displaying danmaku which is being scanned\r\n                    var currentDDBottom = displayingList[i].y + displayingList[i].textHeight;\r\n                    // Estimated value of the bottom of the danmaku being positioned\r\n                    var estimatedCDPBottom = currentY + danmaku.textHeight;\r\n                    // The danmaku being scanned has (just) left the right edge of the stage.\r\n                    if (displayingList[i].x < stageWidth - displayingList[i].textWidth) {\r\n                        // The danmaku being scanned \"embraces\" the danmaku being positioned.\r\n                        if (displayingList[i].y <= currentY && estimatedCDPBottom <= currentDDBottom) {\r\n                            currentY = displayingList[i].y;\r\n                        }\r\n                    } else {\r\n                        // The danmaku being scanned \"crashes\" with the danmaku being positioned.\r\n                        if (displayingList[i].y <= estimatedCDPBottom || currentDDBottom <= currentY) {\r\n                            currentY = currentDDBottom;\r\n                        }\r\n                    }\r\n                    if (currentY > stageHeight - danmaku.textHeight) {\r\n                        // Wrapping in a function is used for the optimizers to detect that variable 'i' is not\r\n                        // modified in the whole array accessing procedure. Sure it can be expanded into normal\r\n                        // form, but I think it will slightly affect performance.\r\n                        currentY = handleOverflow(displayingList, i, SimpleDanmakuType.FlyingR2L);\r\n                        if (currentY > stageHeight - danmaku.textHeight) {\r\n                            currentY = 0;\r\n                        }\r\n                        break;\r\n                    }\r\n                    if (currentDDBottom > bottommostThereIs) {\r\n                        bottommostThereIs = currentDDBottom;\r\n                    }\r\n                }\r\n            }\r\n            // If the space in the bottom is enough, we do not have to care about the complicated layout algorithm.\r\n            if (bottommostThereIs <= stageHeight - danmaku.textHeight) {\r\n                danmaku.y = bottommostThereIs;\r\n            } else {\r\n                danmaku.y = currentY;\r\n            }\r\n        } else {\r\n            danmaku.y = 0;\r\n        }\r\n        danmaku.ySet = true;\r\n    }\r\n}\r\n\r\nfunction handleOverflow(displayingList:SimpleDanmaku[], currentIndex:number, type:SimpleDanmakuType):number {\r\n    // The stage is full of flying (now all types of) danmakus. Now follow the last positioned danmaku.\r\n    // If overflow happens again, reset Y position to the top of the stage.\r\n    // newY will definitely be assigned.\r\n    var newY:number;\r\n    do {\r\n        if (displayingList[currentIndex].isType(type) && displayingList[currentIndex].ySet) {\r\n            newY = displayingList[currentIndex].y + displayingList[currentIndex].textHeight;\r\n        }\r\n        ++currentIndex;\r\n    } while (currentIndex < displayingList.length);\r\n    return newY;\r\n}\r\n\r\nfunction positionTop(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n    if (!danmaku.xSet) {\r\n        danmaku.x = (measureParams.stage.stageWidth - danmaku.textWidth) / 2;\r\n        danmaku.xSet = true;\r\n    }\r\n    var stageHeight = measureParams.stage.stageHeight;\r\n    var displayingList = measureParams.displayingList;\r\n    if (!danmaku.ySet) {\r\n        var currentY = 0;\r\n        if (displayingList.length > 0) {\r\n            for (var i = 0; i < displayingList.length; ++i) {\r\n                if (displayingList[i].isType(SimpleDanmakuType.AnchoredTop) && displayingList[i].ySet) {\r\n                    var currentDDBottom = displayingList[i].y + displayingList[i].textHeight;\r\n                    var estimatedCDPBottom = currentY + danmaku.textHeight;\r\n                    // The displaying danmaku being measured \"contains\" the danmaku being positioned.\r\n                    if (GLUtil.isValueBetweenEquals(estimatedCDPBottom, displayingList[i].y, currentDDBottom) ||\r\n                        GLUtil.isValueBetweenEquals(currentY, displayingList[i].y, currentDDBottom)) {\r\n                        currentY = currentDDBottom;\r\n                    }\r\n                    if (currentY > stageHeight - danmaku.textHeight) {\r\n                        currentY = handleOverflow(displayingList, i, SimpleDanmakuType.AnchoredTop);\r\n                        if (currentY > stageHeight - danmaku.textHeight) {\r\n                            currentY = 0;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        danmaku.y = currentY;\r\n        danmaku.ySet = true;\r\n    }\r\n}\r\n\r\nfunction positionBottom(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n}\r\n\r\nfunction positionTopLeft(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n\r\n}\r\n\r\nfunction positionTopRight(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n\r\n}\r\n\r\nfunction positionBottomLeft(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n\r\n}\r\n\r\nfunction positionBottomRight(danmaku:SimpleDanmaku, measureParams:IMeasureParams):void {\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
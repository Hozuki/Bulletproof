{"version":3,"sources":["danmaku/danmakucoordinator.ts"],"names":["DanmakuCoordinator","DanmakuCoordinator.constructor","DanmakuCoordinator.dispose","DanmakuCoordinator.shouldCreateDanmaku","DanmakuCoordinator.addDanmakuProvider","DanmakuCoordinator.removeDanmakuProvider","DanmakuCoordinator.getDanmakuProvider","DanmakuCoordinator.update","DanmakuCoordinator.render","DanmakuCoordinator.bulletproof"],"mappings":"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","file":"danmaku/DanmakuCoordinator.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/29.\r\n */\r\n\r\nimport {IDisposable} from \"../../lib/glantern/src/IDisposable\";\r\nimport {NotImplementedError} from \"../../lib/glantern/src/_util/NotImplementedError\";\r\nimport {_util} from \"../../lib/glantern/src/_util/_util\";\r\nimport {DanmakuKind} from \"./DanmakuKind\";\r\nimport {DanmakuProviderBase} from \"./DanmakuProviderBase\";\r\nimport {Bulletproof} from \"../Bulletproof\";\r\nimport {IWebGLElement} from \"../../lib/glantern/src/webgl/IWebGLElement\";\r\nimport {WebGLRenderer} from \"../../lib/glantern/src/webgl/WebGLRenderer\";\r\nimport {DanmakuBase} from \"./DanmakuBase\";\r\nimport {DanmakuProviderFlag} from \"./DanmakuProviderFlag\";\r\n\r\n/**\r\n * The coordinator of all danmakus.\r\n * This class is a factory and manager of danmaku providers.\r\n */\r\nexport class DanmakuCoordinator implements IWebGLElement {\r\n\r\n    /**\r\n     * Creates a new {@Link DanmakuCoordinator} instance.\r\n     * @param bulletproof {Bulletproof} The {@link Bulletproof} instance that will be attached to.\r\n     */\r\n    constructor(bulletproof:Bulletproof) {\r\n        this._bulletproof = bulletproof;\r\n        this._danmakuProviders = new Map<DanmakuKind, DanmakuProviderBase>();\r\n    }\r\n\r\n    /**\r\n     * Disposes the {@link DanmakuCoordinator} instance and release all resources occupied.\r\n     */\r\n    dispose():void {\r\n        this._danmakuProviders.forEach((provider:DanmakuProviderBase):void => {\r\n            provider.dispose();\r\n        });\r\n        this._danmakuProviders.clear();\r\n    }\r\n\r\n    /**\r\n     * Determines whether a danmaku should be created.\r\n     * For example, if the density of danmakus are too high, this function should returns false when a\r\n     * {@link SimpleDanamkuProvider} is requesting creation of a new danmaku, to avoid performance drop.\r\n     * Danmaku providers should check via this function before actually creating a danmaku.\r\n     * @param requestingProvider {DanmakuProviderBase} The danmaku provider requesting the check.\r\n     */\r\n    shouldCreateDanmaku(requestingProvider:DanmakuProviderBase):boolean {\r\n        if ((requestingProvider.flags & DanmakuProviderFlag.UnlimitedCreation) !== 0) {\r\n            return true;\r\n        }\r\n        var canCreate = true;\r\n        if (false) {\r\n            // Can create only when 2 conditions are both met:\r\n            // 1. Total count of danmakus is below global threshold;\r\n            // 2. Total count of danmakus of the kind of requesting danmaku provider is below the provider's threshold.\r\n            var totalDanmakuCount = 0;\r\n            var globalThreshold = 100;\r\n            var specificThreshold = 10;\r\n            this._danmakuProviders.forEach((provider:DanmakuProviderBase):void => {\r\n                if (canCreate) {\r\n                    var dl = provider.danmakuList.length;\r\n                    totalDanmakuCount += dl;\r\n                    if (totalDanmakuCount > globalThreshold || dl > specificThreshold) {\r\n                        canCreate = false;\r\n                    }\r\n                }\r\n            });\r\n            if (!canCreate) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds a new kind of danmaku provider to provider instance list. If the a provider of that kind\r\n     * already exists, the new one will not be added.\r\n     * @param provider {DanmakuProviderBase} The danmaku provider preparing to be added.\r\n     */\r\n    addDanmakuProvider(provider:DanmakuProviderBase):void {\r\n        if (!_util.isUndefinedOrNull(provider) && !this._danmakuProviders.has(provider.danmakuKind)) {\r\n            this._danmakuProviders.set(provider.danmakuKind, provider);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a new kind of danmaku provider from provider instance list.\r\n     * @param provider {DanmakuProviderBase} The danmaku provider preparing to be removed.\r\n     */\r\n    removeDanmakuProvider(provider:DanmakuProviderBase):void {\r\n        if (!_util.isUndefinedOrNull(provider) && this._danmakuProviders.has(provider.danmakuKind)) {\r\n            this._danmakuProviders.delete(provider.danmakuKind);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the instance of danmaku provider whose kind is as specified. If the kind is not registered,\r\n     * a null value will be returned.\r\n     * @param kind {DanmakuKind} The danmaku kind of requested danmaku provider.\r\n     * @returns {DanmakuProviderBase}\r\n     */\r\n    getDanmakuProvider(kind:DanmakuKind):DanmakuProviderBase {\r\n        var provider = this._danmakuProviders.get(kind);\r\n        if (_util.isUndefinedOrNull(provider)) {\r\n            return null;\r\n        } else {\r\n            return provider;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the status of all danmaku providers.\r\n     */\r\n    update():void {\r\n        this._danmakuProviders.forEach((provider:DanmakuProviderBase):void => {\r\n            provider.update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform extra rendering if needed.\r\n     * @param renderer {WebGLRenderer} The renderer used.\r\n     */\r\n    render(renderer:WebGLRenderer):void {\r\n        // Do nothing.\r\n    }\r\n\r\n    get bulletproof():Bulletproof {\r\n        return this._bulletproof;\r\n    }\r\n\r\n    private _danmakuProviders:Map<DanmakuKind, DanmakuProviderBase> = null;\r\n    private _bulletproof:Bulletproof = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
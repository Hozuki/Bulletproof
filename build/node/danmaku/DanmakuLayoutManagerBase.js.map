{"version":3,"sources":["danmaku/danmakulayoutmanagerbase.ts"],"names":["DanmakuLayoutManagerBase","DanmakuLayoutManagerBase.constructor","DanmakuLayoutManagerBase.danmakuKind","DanmakuLayoutManagerBase.danmakuProvider","DanmakuLayoutManagerBase.bulletproof"],"mappings":"AAAA;;GAEG;AAMH,oCAAkC,kDAAkD,CAAC,CAAA;AAMrF;;;;;;GAMG;AACH;IAEIA;;;OAGGA;IACHA,kCAAYA,QAA4BA;QAiD9BC,qBAAgBA,GAAuBA,IAAIA,CAACA;QAC9CA,iBAAYA,GAAeA,IAAIA,CAACA;QAjDpCA,IAAIA,CAACA,gBAAgBA,GAAGA,QAAQA,CAACA;QACjCA,IAAIA,CAACA,YAAYA,GAAGA,QAAQA,CAACA,WAAWA,CAACA;IAC7CA,CAACA;IAYDD,sBAAIA,iDAAWA;QAJfA;;;WAGGA;aACHA;YACIE,MAAMA,IAAIA,yCAAmBA,EAAEA,CAACA;QACpCA,CAACA;;;OAAAF;IAoBDA,sBAAIA,qDAAeA;QAJnBA;;;WAGGA;aACHA;YACIG,MAAMA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA;QACjCA,CAACA;;;OAAAH;IAMDA,sBAAIA,iDAAWA;QAJfA;;;WAGGA;aACHA;YACII,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;QAC7BA,CAACA;;;OAAAJ;IAKLA,+BAACA;AAADA,CA1DA,AA0DCA,IAAA;AA1DqB,gCAAwB,2BA0D7C,CAAA","file":"danmaku/DanmakuLayoutManagerBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/28.\r\n */\r\n\r\nimport {DanmakuKind} from \"./DanmakuKind\";\r\nimport {IDisposable} from \"../../lib/glantern/src/IDisposable\";\r\nimport {Point} from \"../../lib/glantern/src/flash/geom/Point\";\r\nimport {DanmakuProviderBase} from \"./DanmakuProviderBase\";\r\nimport {NotImplementedError} from \"../../lib/glantern/src/_util/NotImplementedError\";\r\nimport {_util} from \"../../lib/glantern/src/_util/_util\";\r\nimport {IDanmaku} from \"./IDanmaku\";\r\nimport {Bulletproof} from \"../Bulletproof\";\r\nimport {StageResizedEventArgs} from \"./StageResizedEventArgs\";\r\n\r\n/**\r\n * Base class exposing common service of a danmaku layout manager.\r\n * A danmaku layout manager does layout calculation and performs optimized layout for danmakus of its kind.\r\n * In special situations, it can also do nothing and let the danmakus themselves to determine the best\r\n * layout, as in {@link ScriptedDanmakuLayoutManager}.\r\n * This class must be inherited.\r\n */\r\nexport abstract class DanmakuLayoutManagerBase implements IDisposable {\r\n\r\n    /**\r\n     * Creates a new danmaku layout manager.\r\n     * @param provider {DanmakuProviderBase} The danmaku provider that will be attached to.\r\n     */\r\n    constructor(provider:DanmakuProviderBase) {\r\n        this._danmakuProvider = provider;\r\n        this._bulletproof = provider.bulletproof;\r\n    }\r\n\r\n    /**\r\n     * Calculates the best layout and sets the danmakus to their new locations.\r\n     * This method must be overridden.\r\n     */\r\n    abstract performLayout():void;\r\n\r\n    /**\r\n     * Gets the kind of danmaku that this danmaku layout manager handles.\r\n     * @returns {DanmakuKind}\r\n     */\r\n    get danmakuKind():DanmakuKind {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Disposes the danmaku layout manager and release all resources occupied.\r\n     * This method must be overridden.\r\n     */\r\n    abstract dispose():void;\r\n\r\n    /**\r\n     * Handles stage resize event.\r\n     * This method must be overridden.\r\n     * @param sender {*} The event firer.\r\n     * @param e {StageResizedEventArgs} Event arguments.\r\n     */\r\n    abstract onStageResize(sender:any, e:StageResizedEventArgs):void;\r\n\r\n    /**\r\n     * Gets the danmaku provider specified at the time of creation.\r\n     * @returns {DanmakuProviderBase}\r\n     */\r\n    get danmakuProvider():DanmakuProviderBase {\r\n        return this._danmakuProvider;\r\n    }\r\n\r\n    /**\r\n     * Gets the {@link Bulletproof} instance that controls this {@link DanmakuLayoutManagerBase}.\r\n     * @returns {Bulletproof}\r\n     */\r\n    get bulletproof():Bulletproof {\r\n        return this._bulletproof;\r\n    }\r\n\r\n    protected _danmakuProvider:DanmakuProviderBase = null;\r\n    private _bulletproof:Bulletproof = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
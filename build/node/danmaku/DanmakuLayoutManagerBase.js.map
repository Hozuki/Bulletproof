{"version":3,"sources":["danmaku/danmakulayoutmanagerbase.ts"],"names":["DanmakuLayoutManagerBase","DanmakuLayoutManagerBase.constructor","DanmakuLayoutManagerBase.performLayout","DanmakuLayoutManagerBase.danmakuKind","DanmakuLayoutManagerBase.danmakuProvider"],"mappings":"AAAA;;GAEG;AAOH,oCAAkC,kDAAkD,CAAC,CAAA;AACrF,sBAAoB,oCAAoC,CAAC,CAAA;AAEzD;;;;;;GAMG;AACH;IAEIA;;;OAGGA;IACHA,kCAAYA,QAA4BA;QA4D9BC,kBAAaA,GAAWA,IAAIA,CAACA;QAC7BA,qBAAgBA,GAAuBA,IAAIA,CAACA;QA5DlDA,IAAIA,CAACA,gBAAgBA,GAAGA,QAAQA,CAACA;QACjCA,IAAIA,CAACA,aAAaA,GAAGA,EAAEA,CAACA;IAC5BA,CAACA;IAUDD;;OAEGA;IACHA,gDAAaA,GAAbA;QACIE,IAAIA,WAAWA,GAAGA,IAAIA,CAACA,eAAeA,CAACA,WAAWA,CAACA;QACnDA,OAAOA,IAAIA,CAACA,aAAaA,CAACA,MAAMA,GAAGA,CAACA,EAAEA,CAACA;YACnCA,IAAIA,CAACA,aAAaA,CAACA,GAAGA,EAAEA,CAACA;QAC7BA,CAACA;QACDA,IAAIA,QAAcA,CAACA;QAEnBA,mFAAmFA;QACnFA,mCAAmCA;QACnCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,WAAWA,CAACA,MAAMA,EAAEA,EAAEA,CAACA,EAAEA,CAACA;YAC1CA,QAAQA,GAAGA,IAAIA,CAACA,kBAAkBA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA,CAACA;YACnDA,IAAIA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;QACtCA,CAACA;QACDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,WAAWA,CAACA,MAAMA,EAAEA,EAAEA,CAACA,EAAEA,CAACA;YAC1CA,QAAQA,GAAGA,IAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA;YACjCA,EAAEA,CAACA,CAACA,CAACA,aAAKA,CAACA,iBAAiBA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;gBACrCA,WAAWA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,QAAQA,CAACA,CAACA,CAACA;gBAC9BA,WAAWA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,QAAQA,CAACA,CAACA,CAACA;YAClCA,CAACA;QACLA,CAACA;IACLA,CAACA;IAMDF,sBAAIA,iDAAWA;QAJfA;;;WAGGA;aACHA;YACIG,MAAMA,IAAIA,yCAAmBA,EAAEA,CAACA;QACpCA,CAACA;;;OAAAH;IAYDA,sBAAIA,qDAAeA;QAJnBA;;;WAGGA;aACHA;YACII,MAAMA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA;QACjCA,CAACA;;;OAAAJ;IAKLA,+BAACA;AAADA,CArEA,AAqECA,IAAA;AArEqB,gCAAwB,2BAqE7C,CAAA","file":"danmaku/DanmakuLayoutManagerBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/28.\r\n */\r\n\r\nimport {DanmakuKind} from \"./DanmakuKind\";\r\nimport {IDisposable} from \"../../lib/glantern/src/IDisposable\";\r\nimport {Point} from \"../../lib/glantern/src/flash/geom/Point\";\r\nimport {DanmakuBase} from \"./DanmakuBase\";\r\nimport {DanmakuProviderBase} from \"./DanmakuProviderBase\";\r\nimport {NotImplementedError} from \"../../lib/glantern/src/_util/NotImplementedError\";\r\nimport {_util} from \"../../lib/glantern/src/_util/_util\";\r\n\r\n/**\r\n * Base class exposing common service of a danmaku layout manager.\r\n * A danmaku layout manager does layout calculation and performs optimized layout for danmakus of its kind.\r\n * In special situations, it can also do nothing and let the danmakus themselves to determine the best\r\n * layout, as in {@link CodeDanmakuLayoutManager}.\r\n * This class must be inherited.\r\n */\r\nexport abstract class DanmakuLayoutManagerBase implements IDisposable {\r\n\r\n    /**\r\n     * Creates a new danmaku layout manager.\r\n     * @param provider {DanmakuProviderBase} The danmaku provider that will be attached to.\r\n     */\r\n    constructor(provider:DanmakuProviderBase) {\r\n        this._danmakuProvider = provider;\r\n        this._locationList = [];\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the advised location of a danmaku, considering current situation. Return null if\r\n     * the danmakus should decide their locations by themselves.\r\n     * This method must be overridden.\r\n     * @param danmaku\r\n     */\r\n    abstract getAdvisedLocation(danmaku:DanmakuBase):Point;\r\n\r\n    /**\r\n     * Calculates the best layout and sets the danmakus to their new locations.\r\n     */\r\n    performLayout():void {\r\n        var danmakuList = this.danmakuProvider.danmakuList;\r\n        while (this._locationList.length > 0) {\r\n            this._locationList.pop();\r\n        }\r\n        var location:Point;\r\n\r\n        // First pass: calculates the locations based on the snapshot of current situation.\r\n        // Second pass: applies the layout.\r\n        for (var i = 0; i < danmakuList.length; ++i) {\r\n            location = this.getAdvisedLocation(danmakuList[i]);\r\n            this._locationList.push(location);\r\n        }\r\n        for (var i = 0; i < danmakuList.length; ++i) {\r\n            location = this._locationList[i];\r\n            if (!_util.isUndefinedOrNull(location)) {\r\n                danmakuList[i].x = location.x;\r\n                danmakuList[i].y = location.y;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the kind of danmaku that this danmaku layout manager handles.\r\n     * @returns {DanmakuKind}\r\n     */\r\n    get danmakuKind():DanmakuKind {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Disposes the danmaku layout manager and release all resources occupied.\r\n     * This method must be overridden.\r\n     */\r\n    abstract dispose():void;\r\n\r\n    /**\r\n     * Gets the danmaku provider specified at the time of creation.\r\n     * @returns {DanmakuProviderBase}\r\n     */\r\n    get danmakuProvider():DanmakuProviderBase {\r\n        return this._danmakuProvider;\r\n    }\r\n\r\n    protected _locationList:Point[] = null;\r\n    protected _danmakuProvider:DanmakuProviderBase = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
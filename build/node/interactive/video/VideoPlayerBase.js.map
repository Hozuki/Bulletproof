{"version":3,"sources":["interactive/video/videoplayerbase.ts"],"names":["VideoPlayerBase","VideoPlayerBase.constructor","VideoPlayerBase.currentTime","VideoPlayerBase.currentRatio","VideoPlayerBase.duration","VideoPlayerBase.autoPlay","VideoPlayerBase.loop","VideoPlayerBase.muted","VideoPlayerBase.defaultMuted","VideoPlayerBase.playbackRate","VideoPlayerBase.defaultPlaybackRate","VideoPlayerBase.volume","VideoPlayerBase.state","VideoPlayerBase.stateText","VideoPlayerBase.playing","VideoPlayerBase.paused","VideoPlayerBase.seeking","VideoPlayerBase.videoWidth","VideoPlayerBase.videoHeight","VideoPlayerBase.fileURL","VideoPlayerBase.hasVideo","VideoPlayerBase.view"],"mappings":"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","file":"interactive/video/VideoPlayerBase.js","sourcesContent":["/**\r\n * Created by MIC on 2016/2/8.\r\n */\r\n\r\nimport {VideoPlayerState} from \"./VideoPlayerState\";\r\nimport {IDisposable} from \"../../../lib/glantern/src/IDisposable\";\r\nimport {NotImplementedError} from \"../../../lib/glantern/lib/glantern-utils/src/NotImplementedError\";\r\n\r\nexport abstract class VideoPlayerBase implements IDisposable {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * Initializes the {@link VideoPlayerBase}.\r\n     */\r\n    abstract initialize(width:number, height:number):void;\r\n\r\n    /**\r\n     * Disposes the instance, and releases all allocated resources.\r\n     */\r\n    abstract dispose():void;\r\n\r\n    /**\r\n     * Load a video from URL.\r\n     * @param url {String} The source URL.\r\n     * @returns {Boolean} Whether the loading procedure was successful.\r\n     */\r\n    abstract load(url:string):boolean;\r\n\r\n    /**\r\n     * Unloads the loaded video (if any) and releases allocated resources.\r\n     */\r\n    abstract unload():void;\r\n\r\n    /**\r\n     * Starts or resumes current video.\r\n     */\r\n    abstract play():void;\r\n\r\n    /**\r\n     * Pauses current video.\r\n     */\r\n    abstract pause():void;\r\n\r\n    /**\r\n     * Resumes current video. If the video is not paused, no operation will be done.\r\n     */\r\n    abstract resume():void;\r\n\r\n    /**\r\n     * Stops current video.\r\n     */\r\n    abstract stop():void;\r\n\r\n    /**\r\n     * Gets current playing timestamp, in seconds.\r\n     * @returns {Number}\r\n     */\r\n    get currentTime():number {\r\n        throw new NotImplementedError();\r\n    };\r\n\r\n    set currentTime(v:number) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets current playing ratio. The ratio is a value between 0 and 1 from start to end.\r\n     * @returns {Number}\r\n     */\r\n    get currentRatio():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set currentRatio(v:number) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of current video, in seconds.\r\n     */\r\n    get duration():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get autoPlay():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set autoPlay(v:boolean) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets whether the video should be looped.\r\n     */\r\n    get loop():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set loop(v:boolean) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets whether the video should be muted.\r\n     */\r\n    get muted():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set muted(v:boolean) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get defaultMuted():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set defaultMuted(v:boolean) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get playbackRate():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set playbackRate(v:number) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get defaultPlaybackRate():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set defaultPlaybackRate(v:number) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets current volume. The value is between 0 and 1 from silence to maximum volume.\r\n     */\r\n    get volume():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    set volume(v:number) {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets the state enum of the player.\r\n     */\r\n    get state():VideoPlayerState {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get stateText():string {\r\n        return VideoPlayerState[this.state];\r\n    }\r\n\r\n    get playing():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get paused():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get seeking():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get videoWidth():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    get videoHeight():number {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets the URL of current video.\r\n     */\r\n    get fileURL():string {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets whether there is a video prepared.\r\n     */\r\n    get hasVideo():boolean {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    /**\r\n     * Gets the element created by the player.\r\n     */\r\n    get view():HTMLElement {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
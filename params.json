{"name":"Bulletproof","tagline":"Advanced danmaku render engine under HTML5 / HTML5 高级弹幕渲染引擎","body":"- [English version](#title-english)\r\n- [简体中文版本](#title-schinese)\r\n\r\n------\r\n\r\n# <span id=\"title-english\">Bulletproof: An HTML5 Danmaku Player</span>\r\n\r\nDanmaku (弾幕) is a Japanese word for \"live comment\", a way video watchers interact with each other.\r\nThe meaning, coming from [bullet hell](//en.wikipedia.org/wiki/Shoot_%27em_up#Bullet_hell), is\r\na analogy of \"live\" comments going through the player like barrages. The original word danmaku\r\nalso means barrage (of military). With some technical support provided by some specific players\r\n(usually web players), a skilled danamku maker can write programs to create special danmakus,\r\nwhich started a kind of art of creating splendid danmakus. It was all started in [Niconico](http://www.nicovideo.jp/).\r\n\r\nThe target of this project is to create a danmaku player based on HTML5.\r\n\r\n## Playing with Bulletproof\r\n\r\nThe source files are compiled. However, playing with the tests needs [nw.js](http://nwjs.io).\r\nYou can get it from its homepage. Browse `test/visual/index.html` in modern browsers to start\r\nselecting test cases. The test cases are:\r\n\r\n- A spinning 3-D ball (`3d-ball.js`);\r\n- Green Dam Musume (`kanpai-green-dam.js`);\r\n- Madoka and her happy <del>tree</del> friends (`kanpai-madoka.js`).\r\n\r\nYou are able to select the tests from the homepage. Source code of the tests can be found in `test/visual/test-scripts/`.\r\n\r\nWant to see some screenshots? [Here they are.](../images/)\r\n\r\n## Building\r\n\r\nBefore building, you will need [Node.js](https://nodejs.org/en/) and [NPM](https://www.npmjs.org/).\r\n\r\n### Automated Building with Gulp\r\n\r\nGulp options are configured, so using Gulp is simple:\r\n\r\n```bash\r\ncd /path/to/project\r\nnpm install\r\ngulp build\r\n```\r\n\r\nGenerated files will be in `build` directory, with:\r\n\r\n1. a `build/node` directory for using as a Node.js module;\r\n2. a `Bulletproof-browser.js` for browsers;\r\n3. a `Bulletproof-browser.min.js` and corresponding source mapping for\r\nbrowsers under production environments.\r\n\r\n### Manual Building with `tsc`\r\n\r\nIf you prefer the old-fashioned way, you have to obtain TypeScript via NPM:\r\n\r\n```bash\r\n$ npm install -g typescript\r\n```\r\n\r\nAfter installing, compile the TypeScript files:\r\n\r\n```\r\n$ cd /path/to/project\r\n$ tsc -p .\r\n```\r\n\r\nGenerated files will be in the same position where the TypeScript sources are.\r\nNote that there are only loose CommonJS style JavaScript files generated in this way.\r\n\r\n## Using Bulletproof in Projects\r\n\r\nIf the environment supports Node.js (e.g. NW.js), please `require()` the entry JavaScript file:\r\n\r\n```javascript\r\nvar Bulletproof = require(\"./Bulletproof/build/node/index\");\r\n```\r\n\r\nIn other cases, please import the files using `<script>` tag:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"./Bulletproof/build/Bulletproof-browser.min.js\"></script>\r\n```\r\n\r\nAfter either way of importing, the `Bulletproof` namespace can be accessed in global scope.\r\nAn example usage can be found [here](../../test/visual/bootstrap.js).\r\n\r\n## Project Status\r\n\r\nThe project is in its alpha age now (oh yeah no pre-alpha again). The classes are not fully implemented yet,\r\nbut main features are active.\r\n\r\n## Credits\r\n\r\n[jabbany](//github.com/jabbany/)\r\n\r\n------\r\n\r\n# <span id=\"title-schinese\">“防弹” HTML5 弹幕播放器</span>\r\n\r\n中文解释起来就没那么费劲了，因为在中国国内已经很常见了。[百度百科词条](//baike.baidu.com/subview/1885531/11304309.htm)\r\n\r\n为什么要起“防弹”这个名称呢？因为[左舷弹幕太薄了](http://zh.moegirl.org/%E5%B7%A6%E8%88%B7%E5%BC%B9%E5%B9%95%E5%A4%AA%E8%96%84%E4%BA%86)。\r\n\r\n## 尝鲜\r\n\r\n为了能让各位能直接看到测试效果，代码已经编译了。您可以使用比较新的浏览器（别用老 IE 和那些国产浏览器）在当前的测试主页（`test/visual/index.html`）显示的示例中选择。当前包含的的示例有：\r\n\r\n- 一个三维旋转的球（`3d-ball.js`）；\r\n- 绿坝娘（`kanpai-green-dam.js`）；\r\n- 小圆脸和她愉♀快的小伙伴们（`kanpai-madoka.js`）。\r\n\r\n所有的测试样例都位于 `test/visual/test-scripts` 目录下。\r\n\r\n如果想看看运行截图的话，[这里就是](../images/)。\r\n\r\n## 构建\r\n\r\n构建过程需要 [Node.js](https://nodejs.org/en/) 和 [NPM](https://www.npmjs.org/)。\r\n\r\n### 坐山观虎斗（误）的构建\r\n\r\n自动化构建采用的是 Gulp，各种配置已经完成。只需要几行命令就可以自动构建：\r\n\r\n```bash\r\n$ cd {项目路径}\r\n$ npm install\r\n$ gulp build\r\n```\r\n\r\n然后在项目的 `build` 目录下会生成编译文件，包括：\r\n\r\n1. `build/node` 目录，其文件组织设计为了将整个项目作为一个 Node.js 模块调用；\r\n2. 可供浏览器运行的 `Bulletproof-browser.js`；\r\n3. 在生产环境下运行的 `Bulletproof-browser.min.js` 和对应的代码映射文件。\r\n\r\n### 事必躬亲的构建\r\n\r\n想和命令行多纠缠一阵子的同学可以使用 TypeScript 的命令行程序编译。\r\n\r\n安装 TypeScript 编译器到全局：\r\n\r\n```bash\r\n$ npm install -g typescript\r\n```\r\n\r\n安装完毕后，编译 TypeScript 源文件：\r\n\r\n```bash\r\n$ cd {项目路径}\r\n$ tsc -p .\r\n```\r\n\r\n不过，这样生成的 `.js` 文件在原来的 `.ts` 文件所在目录中，只适用于普通的引用。\r\n\r\n## 使用方法\r\n\r\n对于支持 Node.js 的环境（例如 NW.js），可以使用 `require()` 函数导入：\r\n\r\n```javascript\r\nvar Bulletproof = require(\"./Bulletproof/build/node/index\");\r\n```\r\n\r\n在普通环境下，请使用 `<script>` 标签：\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"./Bulletproof/build/Bulletproof-browser.min.js\"></script>\r\n```\r\n\r\n在任何一种导入方式完成后，全局域中会添加一个 `Bulletproof` 命名空间。之后的使用示例可以来[这里](../../test/visual/bootstrap.js)看看。\r\n\r\n## 项目状态\r\n\r\n目前是 alpha 状态。一些关键的 API 实现了，沙箱还没做。\r\n\r\n## 致谢\r\n\r\n[jabbany](//github.com/jabbany/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}